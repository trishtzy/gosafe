package utils

import (
	"math/big"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/trishtzy/gosafe/pkg/types"
)

func TestGetTransactionHash(t *testing.T) {
	type args struct {
		safeTransaction *types.SafeTransaction
	}
	tests := []struct {
		name string
		args args
		want []byte
	}{
		{
			name: "test1",
			args: args{
				safeTransaction: &types.SafeTransaction{
					SafeAddress: common.HexToAddress("0x97eaA9E84A40C12078bCEE5e67189578c3B4FB02"),
					ChainID:     big.NewInt(8453),
					Data: types.SafeTransactionData{
						MetaTransactionData: types.MetaTransactionData{
							To:        common.HexToAddress("0xfdaFc9d1902f4e0b84f65F49f244b32b31013b74"),
							Value:     big.NewInt(0),
							Data:      common.FromHex("0x0d0d9800000000000000000000000000000000000000000000000000000000000000008000000000000000000000000052ed56da04309aca4c3fecc595298d80c2f16bac000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a5000000000000000000000000000000000000000000000000000000196200776000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000cbb7c0000ab88b473b1f5afd9ef808440eed33bf00000000000000000000000097eaa9e84a40c12078bcee5e67189578c3b4fb02000000000000000000000000000000000000000000000000000000000bebc200000000000000000000000000000000000000000000000000000000000003ba800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000010e00000000000000000000000000000000000000000000000000000000000000000254a6bb0291c3c648a58787efc227040e1d2434628506b50561ddd0711a691400000000000000000000000000000000000000000000000000000000000000000"),
							Operation: types.OperationType(0),
						},
						SafeTxGas:      big.NewInt(0),
						BaseGas:        big.NewInt(0),
						GasPrice:       big.NewInt(0),
						GasToken:       common.HexToAddress("0x0000000000000000000000000000000000000000"),
						RefundReceiver: common.HexToAddress("0x0000000000000000000000000000000000000000"),
						Nonce:          big.NewInt(15),
					},
					Signatures: [][]byte{
						common.FromHex("0x9bd59b3895f463e190bae12844cae99f5e687233f6f544c46cd765cc9958be6a0e477f48c10d1d428330cdd6fd267593c5bf7b90986c81e3d2178709f940e5971c"),
						common.FromHex("0x9bd89f115f6f334a5aee7d23da46a8db52adb66fc7d5257f1934b08bc00b75a669ddc9c5d1841c59195a672a9073be032423ecc65687aaebc1e02b975aa578a91c"),
					},
					ContractSignatures: [][]byte{},
				},
			},
			want: common.FromHex("0xd6bc229f16327dd7f1dafa6b100979c74ad0a1c500e9fe61c79e52d114c288d8"),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := GetTransactionHash(tt.args.safeTransaction); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("GetTransactionHash() = %x, want %x", got, tt.want)
			}
		})
	}
}
